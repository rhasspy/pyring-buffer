---
name: Release Dry Run (PyPI + GitHub)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.ver.outputs.tag }}
      file_ver: ${{ steps.ver.outputs.file_ver }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install build tools
        run: pip install build tomli
      - name: Verify tag matches pyproject.toml version
        id: ver
        shell: bash
        run: |
          TAG="${GITHUB_REF#refs/tags/v}"
          FILE_VER=$(python - <<'PY'
try:
    import tomllib as toml
except Exception:
    import tomli as toml
with open("pyproject.toml", "rb") as f:
    print(toml.load(f)["project"]["version"])
PY
)
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "file_ver=$FILE_VER" >> "$GITHUB_OUTPUT"
          echo "Tag: $TAG"
          echo "pyproject.toml: $FILE_VER"
          [ "$TAG" = "$FILE_VER" ] || { echo "❌ Tag ($TAG) != pyproject.toml ($FILE_VER)"; exit 1; }
      - name: Build dists
        run: python -m build
      - name: Upload dists
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  changelog:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Extract release notes from CHANGELOG.md (fail if missing)
        id: notes
        shell: bash
        run: |
          TAG="${{ needs.build.outputs.tag }}"
          python - "$TAG" > RELEASE_NOTES.md <<'PY'
import re, sys, pathlib
ver = sys.argv[1]
chlog = pathlib.Path("CHANGELOG.md")
if not chlog.exists():
    print("CHANGELOG.md not found", file=sys.stderr)
    sys.exit(2)

text = chlog.read_text(encoding="utf-8")

# Match headings like:
#   ## [1.2.3] - 2025-10-06
#   ## [1.2.3]
#   ## 1.2.3
#   ## v1.2.3
pat = re.compile(rf"^##\s*\[?v?{re.escape(ver)}\]?(?:\s*-\s*.+)?\s*$", re.MULTILINE)
m = pat.search(text)
if not m:
    print(f"No changelog section found for {ver}", file=sys.stderr)
    sys.exit(3)

start = m.end()
m2 = re.search(r"^##\s", text[start:], re.MULTILINE)  # next version heading
section = text[start:] if not m2 else text[start:start+m2.start()]
section = section.strip()

# Consider it invalid if it's empty or only whitespace/markdown link refs
only_links = re.fullmatch(r"(?:\[[^\]]+\]:\s*\S+\s*)*", section or "", re.MULTILINE)
if not section or only_links:
    print(f"Changelog section for {ver} is empty", file=sys.stderr)
    sys.exit(4)

print(section)
PY
          # Double-check file is non-empty at shell level too
          if [ ! -s RELEASE_NOTES.md ]; then
            echo "❌ RELEASE_NOTES.md is empty."
            exit 5
          fi
      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: RELEASE_NOTES.md

  dry_run_publish:
    needs: [build, changelog]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .
      - name: Print dry-run summary
        run: |
          echo "✅ Would publish to PyPI via Trusted Publisher (OIDC)"
          echo "   Tag: ${{ needs.build.outputs.tag }}"
          echo "   Version: ${{ needs.build.outputs.file_ver }}"
          echo "   Dist files:"
          ls -lh dist
          echo
          echo "✅ Would create GitHub Release for tag ${{ github.ref_name }}"
          echo "   Using changelog notes from RELEASE_NOTES.md:"
          echo "---------------------------------------------"
          cat RELEASE_NOTES.md
          echo "---------------------------------------------"
          echo "(Dry run complete — nothing was uploaded.)"
