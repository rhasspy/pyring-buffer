---
name: Release Dry Run (PyPI + GitHub)

on:
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      file_ver: ${{ steps.read_ver.outputs.file_ver }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0   # IMPORTANT: get full history + tags

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install build tools
        run: pip install build tomli

      - name: Extract latest version tag (semver)
        id: tag
        shell: bash
        run: |
          # Ensure we have tags (checkout with fetch-depth: 0 usually gets them)
          git fetch --tags --force --quiet

          # List tags in descending semantic order. v-prefixed and bare tags supported.
          # Filter to tags that look like v1.2.3 or 1.2.3 (3-part semver).
          mapfile -t TAGS < <(git tag --list --sort=-v:refname)
          LATEST=""
          for t in "${TAGS[@]}"; do
            if [[ "$t" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              LATEST="$t"
              break
            fi
          done

          if [ -z "$LATEST" ]; then
            echo "❌ No semver-like tags found (expected tags like v1.2.3 or 1.2.3)" >&2
            exit 1
          fi

          # Strip leading 'v' for comparison to pyproject version
          STRIPPED="${LATEST#v}"

          echo "Found latest tag: $LATEST (stripped: $STRIPPED)"
          echo "raw_tag=$LATEST" >> "$GITHUB_OUTPUT"
          echo "tag=$STRIPPED" >> "$GITHUB_OUTPUT"

      - name: Read version from pyproject.toml
        id: read_ver
        shell: python
        run: |
          import os
          try:
              import tomllib as toml   # Python 3.11+
          except Exception:
              import tomli as toml     # fallback
          with open("pyproject.toml","rb") as f:
              data = toml.load(f)
          ver = data["project"]["version"]
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              fh.write(f"file_ver={ver}\n")
          print(f"pyproject.toml version: {ver}")

      - name: Verify latest tag matches pyproject.toml version
        shell: bash
        run: |
          TAG="${{ steps.tag.outputs.tag }}"
          FILE_VER="${{ steps.read_ver.outputs.file_ver }}"
          echo "Latest tag (stripped): $TAG"
          echo "pyproject.toml:        $FILE_VER"
          if [ "$TAG" != "$FILE_VER" ]; then
            echo "❌ Latest tag ($TAG) != pyproject.toml ($FILE_VER)"
            exit 1
          fi

      - name: Build dists
        run: python -m build

      - name: Upload dists
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  changelog:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract release notes (fail if missing)
        id: notes
        shell: python
        env:
          TAG: ${{ needs.build.outputs.tag }}
        run: |
          import os, re, sys, pathlib
          ver = os.environ["TAG"]
          chlog = pathlib.Path("CHANGELOG.md")
          if not chlog.exists():
              print("CHANGELOG.md not found", file=sys.stderr)
              sys.exit(2)
          text = chlog.read_text(encoding="utf-8")
          # Matches "## [1.2.3] - 2025-10-06", "## [1.2.3]", "## 1.2.3", or "## v1.2.3"
          pat = re.compile(rf"^##\s*\[?v?{re.escape(ver)}\]?(?:\s*-\s*.+)?\s*$", re.MULTILINE)
          m = pat.search(text)
          if not m:
              print(f"No changelog section found for {ver}", file=sys.stderr)
              sys.exit(3)
          start = m.end()
          m2 = re.search(r"^##\s", text[start:], re.MULTILINE)
          section = text[start:] if not m2 else text[start:start+m2.start()]
          section = section.strip()
          only_links = re.fullmatch(r"(?:\[[^\]]+\]:\s*\S+\s*)*", section or "", re.MULTILINE)
          if not section or only_links:
              print(f"Changelog section for {ver} is empty", file=sys.stderr)
              sys.exit(4)
          pathlib.Path("RELEASE_NOTES.md").write_text(section, encoding="utf-8")

      - name: Upload notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: RELEASE_NOTES.md

  dry_run_publish:
    needs: [build, changelog]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .
      - name: Print dry-run summary
        run: |
          echo "✅ Would publish to PyPI via Trusted Publisher (OIDC)"
          echo "   Latest tag (raw): ${{ steps.fetch_latest_tag.outputs.raw_tag }}"
          echo "   Tag (stripped):   ${{ needs.build.outputs.tag }}"
          echo "   Version:          ${{ needs.build.outputs.file_ver }}"
          echo "   Dist files:"
          ls -lh dist
          echo
          echo "✅ Would create GitHub Release for tag ${{ steps.fetch_latest_tag.outputs.raw_tag }}"
          echo "   Using changelog notes from RELEASE_NOTES.md:"
          echo "---------------------------------------------"
          cat RELEASE_NOTES.md
          echo "---------------------------------------------"
          echo "(Dry run complete — nothing was uploaded.)"
